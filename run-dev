#!/bin/sh
## Dev runnder
## Very poor man runner for services

BASEDIR=$(cd "$DMG_DIRNAME" > /dev/null; pwd)

if [ "$IFN_BUILD_DIR" != "" ]; then
    BIN_DIR=$IFN_BUILD_DIR
else
    BIN_DIR=$(dirname $0)
fi

if [ "$ENV_DIR" == "" ]; then
    echo "ENV_DIR environment variable is expected with env file locations"
    exit 1
fi

source $BASEDIR/conf

# Pid and log file will go alongside with service binary ()
PID_DIR=$BIN_DIR
LOG_PATH=$BIN_DIR

set -a
. $ENV_DIR/common.env
set +a

action=$1
service=$2

shift 2

T_RED=\\033[31m
T_GREEN=\\033[32m
T_DEF=\\033[0m
T_YELLOW=\\033[33m

register_pid() {
    PID=$1
    APP=$2
    if ps -p $PID > /dev/null
    then
        echo "$APP started with pid $PID"
        echo $PID > $PID_DIR/$APP.pid
    else
        echo "Unable to find pid for $APP"
    fi
}

show_help() {
    echo "Usage run command service"
    echo  "Commands"
    echo  "   start, stop, status : obvious"
    echo  "   pid                 : register current running process as managed pid"
    echo  "   webenv              : update .env.local into web site"
    echo  "Services"
    echo  "  logging    : loggin service"
    echo  "  study      : study service"
    echo  "  user       : user-management-api service"
    echo  "  messaging  : messaging service"
    echo  "  scheduler  : message-schedule service"
    echo  "  email-client  : email-client  service"
    echo  "  management-api : management API service"
    echo  "  participant-api : participant API  service"
}

APPS="logging user study messaging message-scheduler email-client management-api participant-api"

# Handle app shortcuts

get_pid() {
    PID_FILE=$PID_DIR/$1.pid
    if [ -f $PID_FILE ];
    then
        cat $PID_DIR/$1.pid
    else
        echo "" 
    fi        
}

## Get App confi
get_app_env() {
    APP=""
    SRC=""
    ENV_NAME=""
    MAKE_TARGET=""

    case "$1" in

        logging|logging_service_app)
            APP=logging_service_app
            ENV_NAME=logging-service
            MAKE_TARGET=build
        ;;

        user|user-management-service-app)
            APP=user-management-service-app
            SRC=$USER_MANAGEMENT_SRC
            ENV_NAME=user-management-service
            MAKE_TARGET=build
        ;;

        study|study-service-app)
            APP=study-service-app
            SRC=$STUDY_SRC
            ENV_NAME=study-service
            MAKE_TARGET=build
        ;;

        messaging|messaging-service)
            APP=messaging-service
            SRC=$MESSAGING_SRC
            ENV_NAME=$APP
            MAKE_TARGET=build
        ;;

        scheduler|message-scheduler)
            APP=message-scheduler
            SRC=$MESSAGING_SRC
            ENV_NAME=$APP
            MAKE_TARGET=build
        ;;

        email-client|email-client-service)
            APP=email-client-service
            SRC=$MESSAGING_SRC
            ENV_NAME=$APP
            MAKE_TARGET=build
        ;;

        api-management|management-api)
            SRC=$API_GATEWAY_SRC
            APP=management-api
            ENV_NAME=$APP
            MAKE_TARGET=management-api
        ;;

        api-participant|participant-api)
            APP=participant-api
            SRC=$API_GATEWAY_SRC
            ENV_NAME=$APP
            MAKE_TARGET=$APP
        ;;

        web)
            APP=public-web-app
            SRC=$WEB_APP_SRC
            ENV_NAME=$APP
            MAKE_TARGET=
        ;;    

        *)
            echo "Unknown app '$1'"
        ;;
        
    esac
}

# Get app name for some actions 
case "$action" in
 start|stop|status|pid|info|build)
    get_app_env $service
    if [ "$APP" == "" ];
    then
        exit 1
    fi
 ;;
esac        

case "$action" in 

    info|build)
        echo "App name $APP"
        echo "Env name $ENV_NAME"
        echo "Src dir  $SRC"
    ;;

    build)
        cd $SRC
        make $MAKE_TARGET
    ;;

    webenv)
        get_app_env web
        file=$ENV_DIR/$ENV_NAME.env
        echo "Installing $file into $SRC"
        cp -f $file $SRC/.env.local
    ;;

    start)
        PID=$(pgrep $APP)
        if [ "$PID" != "" ];
        then 
            echo "App $APP is already running with pid $PID"
            exit 1
        fi
        set -a
        . $ENV_DIR/$ENV_NAME.env
        set +a
        $BIN_DIR/$APP &> $LOG_PATH/$APP.log &
        PID=$!
        register_pid $PID $APP
        sleep 3
        ps -p $PID > /dev/null
        if [ $? -ne 0 ];
        then
            echo "The process is not running any more"
        fi
    ;;

    stop)
        PID=$(get_pid $APP)
        if [ "$PID" == "" ];
        then
           echo "Unable to find pid for app $APP"
           exit 1
        fi
        ps -p $PID > /dev/null
        if [ $? -eq 0 ];
        then
            kill -9 $PID
            sleep 5
            ps -p $PID > /dev/null
            if  [ $? -eq 0 ];
            then
                echo "process $PID still running cannot stop ?"
            else 
                rm $PID_DIR/$APP.pid
            fi
        else
            echo "Unable to find $PID for $APP"
        fi
    ;;

    status)
        PID=$(cat $PID_DIR/$APP.pid)
        AID=$(pgrep $APP)
         ps -p $PID > /dev/null
        if [ $? -eq 0 ];
        then
            if [ "$PID" == "$AID" ]; then
                echo "$APP is running with pid $PID"
            else
                echo "$APP is running under $AID but registred as $PID, update with pid command"
            fi
        else
            echo "Unable to find $PID for $APP"
        fi
    ;;

    pid)
        PID=$(pgrep $APP)
        if [ "$PID" != "" ];
        then
            echo "Registering $PID for $APP"
            echo $PID > $PID_DIR/$APP.pid
        else 
            echo "Unable to find $APP"
        fi
    ;;

    running)
        for svc in $APPS
        do
            get_app_env $svc
            PID=$(get_pid $APP)
            RUNID=$(pgrep $APP)
            T_APP=${T_YELLOW}${APP}${T_DEF}
            if [ "$RUNID" != "" ];
            then
                if [ "$PID" == "$RUNID" ]; 
                then
                    echo "- $T_APP is ${T_GREEN}running${T_DEF} with pid $PID"
                else
                    echo "- $T_APP is ${T_GREEN}running${T_DEF} under $RUNID but registred as $PID, update with pid command"
                fi
            else
                if [ "$PID" != "" ]; 
                then
                    rm $PID_DIR/$APP.pid # Remove old pid
                    echo "- $T_APP is ${T_RED}not runnning${T_DEF} (but PID $PID was registred, removed)"
                else
                    echo "- $T_APP is ${T_RED}not running${T_DEF}"
                fi
            fi
        done
    ;;

    *)
        echo "Unknown action '$action'"
        show_help
    ;;
esac